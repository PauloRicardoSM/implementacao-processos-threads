package main

import (
	"fmt"
	"math/rand"
	"sync"
	"time"
)

// Estrutura que representa um pedido
type Pedido struct {
	ID         int
	Produto    string
	Valido     bool
	Pago       bool
	Processado bool
}

func main() {
	// Cria√ß√£o dos canais para cada etapa do pipeline
	novosPedidos := make(chan Pedido)
	pedidosValidados := make(chan Pedido)
	pedidosPagos := make(chan Pedido)
	pedidosProcessados := make(chan Pedido)

	// WaitGroup para esperar o t√©rmino de todas as goroutines
	var wg sync.WaitGroup

	// Inicia os servi√ßos (goroutines) para cada etapa
	wg.Add(4)
	go servicoValidacao(novosPedidos, pedidosValidados, &wg)
	go servicoPagamento(pedidosValidados, pedidosPagos, &wg)
	go servicoEstoque(pedidosPagos, pedidosProcessados, &wg)
	go servicoNotificacao(pedidosProcessados, &wg)

	// Gerador de novos pedidos (simula√ß√£o)
	go func() {
		for i := 1; i <= 10; i++ {
			novoPedido := Pedido{
				ID:      i,
				Produto: fmt.Sprintf("Produto-%d", i),
			}
			fmt.Printf("‚úÖ Novo pedido recebido: ID %d\n", novoPedido.ID)
			novosPedidos <- novoPedido
			time.Sleep(time.Duration(rand.Intn(500)) * time.Millisecond) // Simula intervalo entre pedidos
		}
		close(novosPedidos) // Fecha o canal quando todos os pedidos forem enviados
	}()

	// Aguarda o t√©rmino de todos os servi√ßos
	wg.Wait()
	fmt.Println("üéâ Todos os pedidos foram processados!")
}

// Servi√ßo de Valida√ß√£o
func servicoValidacao(entrada <-chan Pedido, saida chan<- Pedido, wg *sync.WaitGroup) {
	defer wg.Done()
	defer close(saida) // Fecha o canal de sa√≠da quando terminar

	for pedido := range entrada {
		// Simula tempo de processamento
		time.Sleep(time.Duration(rand.Intn(300)) * time.Millisecond)

		// Valida√ß√£o do pedido (exemplo simples)
		pedido.Valido = pedido.ID%2 == 0 // Apenas IDs pares s√£o v√°lidos

		if pedido.Valido {
			fmt.Printf("üü¢ Pedido %d validado com sucesso\n", pedido.ID)
			saida <- pedido
		} else {
			fmt.Printf("üî¥ Pedido %d rejeitado na valida√ß√£o\n", pedido.ID)
		}
	}
}

// Servi√ßo de Pagamento
func servicoPagamento(entrada <-chan Pedido, saida chan<- Pedido, wg *sync.WaitGroup) {
	defer wg.Done()
	defer close(saida)

	for pedido := range entrada {
		time.Sleep(time.Duration(rand.Intn(400)) * time.Millisecond)

		// Simula√ß√£o de pagamento (sempre bem-sucedido neste exemplo)
		pedido.Pago = true
		fmt.Printf("üí≥ Pagamento processado para pedido %d\n", pedido.ID)
		saida <- pedido
	}
}

// Servi√ßo de Estoque
func servicoEstoque(entrada <-chan Pedido, saida chan<- Pedido, wg *sync.WaitGroup) {
	defer wg.Done()
	defer close(saida)

	for pedido := range entrada {
		time.Sleep(time.Duration(rand.Intn(500)) * time.Millisecond)

		// Atualiza estoque e marca como processado
		pedido.Processado = true
		fmt.Printf("üì¶ Estoque atualizado para pedido %d\n", pedido.ID)
		saida <- pedido
	}
}

// Servi√ßo de Notifica√ß√£o
func servicoNotificacao(entrada <-chan Pedido, wg *sync.WaitGroup) {
	defer wg.Done()

	for pedido := range entrada {
		time.Sleep(time.Duration(rand.Intn(200)) * time.Millisecond)
		fmt.Printf("‚úâÔ∏è Cliente notificado sobre pedido %d: %s\n", pedido.ID, pedido.Produto)
	}
}
